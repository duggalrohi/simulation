#!/usr/bin/python3

"""

Example python script to extract and plot data from the MUWDemo model.

Remember to run this model first so you have the Results.sigurd output file!

"""

import matplotlib.pyplot as plt

from volsung.volsungmodel import *

# load the model
model = VolsungModel("Results.sigurd")

# create individual plots

# wellhead curves over time
# including field data
f = plt.figure()
ax = plt.subplot(111)
obj = model.flowNetwork.portObject("Prod Well")
handles = []
dates = []
# plot every 4th curve only
for i in range(0, model.reservoir.numberOfZones(), 4):
    whp = obj.wellheadData(i, "Pressure") * 1e-5
    w = obj.wellheadData(i, "Mass Rate") * 3.6
    h, = ax.plot(whp, w)
    handles.append(h)
    dates.append(model.reservoir.zoneTimeStr(i, False))
# plot the field data closest to zone time 0
fielddata = obj.wellheadFieldData.timeSlice(model.reservoir.zoneTime(0))
ax.plot(fielddata["Pressure"] * 1e-5, fielddata["Mass Rate"] * 3.6, "o r")
plt.xlabel("WHP [bar]")
plt.ylabel("w [t/h]")
plt.title(obj.name + " - DC")
plt.legend(handles, dates, loc = 'best')

# output port over time
# plot power generated by plant
# including field data
f = plt.figure()
ax = plt.subplot(111)
obj = model.flowNetwork.portObject("SteamPlant")
h1, = ax.plot(model.reservoir.toDateTime(model.reservoir.zoneTimes()), obj.outputPorts[1].zoneHistory("Energy Rate") * 1e-6)
h2, = ax.plot(model.reservoir.toDateTime(obj.outputPorts[1].fieldHistory("Time")), obj.outputPorts[1].fieldHistory("Energy Rate") * 1e-6, "o r")
plt.ylabel("Q [MW]")
plt.title(obj.name + " - Power")
plt.legend([h1, h2], ["Simulation", "Field Data"])
    
# output port over time
# plot flow rate from the two wells
f = plt.figure()
ax = plt.subplot(111)
well1 = model.flowNetwork.portObject("Prod Well")
well2 = model.flowNetwork.portObject("MakeUp Well")
h1, = ax.plot(model.reservoir.toYearFrac(model.reservoir.zoneTimes()), well1.outputPorts[0].zoneHistory("Mass Rate") * 3.6, "-b")
h2, = ax.plot(model.reservoir.toYearFrac(model.reservoir.zoneTimes()), well2.outputPorts[0].zoneHistory("Mass Rate") * 3.6, "-r")
plt.ylabel("w [t/h]")
plt.title("Well Flow Rates")
plt.legend([h1, h2], [well1.name, well2.name], loc = 'best')
    
# plot reservoir temperature along a well track, including field data
zoneId = 0
f = plt.figure()
ax = plt.subplot(111)
monitor = model.flowNetwork.portObject("Monitor Well")
# probe the reservoir with the welltrack
# raw
probe = model.reservoir.probeWellTrack(monitor.wellGridGeometry[zoneId], zoneId, average = False)
h0, = ax.plot(probe["Temperature"] - 273.15, probe["z"], "-g")
# interpolated (smooth)
probe = model.reservoir.interpolateWellTrack(monitor.wellGridGeometry[zoneId], zoneId)
h1, = ax.plot(probe["Temperature"] - 273.15, probe["z"], "-b")
# plot the field data by requiring a time slice.
# if time is nan then all data is returned; else data closest to the time provided is chosen
fielddata = monitor.reservoir1DFieldData.timeSlice(time = float('nan'))
h2, = ax.plot(fielddata["Temperature"] - 273.15, fielddata["z"], "-r")
plt.ylabel("z [m]")
plt.xlabel("Temperature [C]")
plt.legend([h0, h1, h2], ["Simulation (raw)", "Simulation (avg)", "Field Data"])
plt.title("Monitor Well Temperature")

# plot a temperature slice through the reservoir
# and display the welltracks on it
f = plt.figure()
ax = plt.subplot(111)
# create the slice as a background
z = -500.0
zoneid = -1                                         # last zone
model.reservoir.slicePlot(f, ax, z, zoneid, arrname = "Temperature", offset = -273.15, direction = "+z")
# now print the welltracks onto the plot
model.flowNetwork.plotWellTracks(f, ax, linewidth = 2, color = '#000000', fontsize = 8)
ax.axis('equal')    # set aspect ratio to equal

# plot a temperature slice through the reservoir
# where the welltracks cross the slice plot discs with well field data
f = plt.figure()
ax = plt.subplot(111)
# create the slice as a background
model.reservoir.slicePlot(f, ax, z, zoneid, arrname = "Temperature", offset = -273.15, direction = "+z")
# now print the welltrack intersections onto the plot
for obj in model.flowNetwork.portObjects:
    obj.plotWellTrackFieldData(f, ax, z, float('nan'), "Temperature", offset = -273.15, radius = 100.0, fontsize = 8, labeloffset = (50, 50))
ax.axis('equal')    # set aspect ratio to equal

# show the plots
plt.show()
