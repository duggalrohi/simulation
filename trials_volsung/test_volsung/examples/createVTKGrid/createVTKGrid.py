#!/usr/bin/python3

"""

This script demonstrates how to create a customized unstructured grid using VTK.
The grid generated here can serve as a grid for running a reservoir model in Volsung.

"""

import vtk

# in this example we will create a regularly spaced tartan grid
# specify the node positions
X = [0, 10, 20, 30]
Y = [0, 20, 40, 60]
Z = [-100, 0, 100]

# setup the grid and points
ug = vtk.vtkUnstructuredGrid()
pts = vtk.vtkPoints()
pts.SetDataTypeToDouble()
ug.SetPoints(pts)

# setup a point locator
# this ensures that points inserted are unique, e.g. there are no two or more points sharing the same location
locator = vtk.vtkPointLocator()
locator.InitPointInsertion(pts, (X[0], X[-1], Y[0], Y[-1], Z[0], Z[-1]))           # need to provide locator with bounds of grid, i.e. min/max positions for x, y and z

# define a convenience function for working with the locator
def insertUniquePoint(x, y, z):
    global locator
    ptid = vtk.reference(0)
    locator.InsertUniquePoint((x,y,z), ptid)
    return ptid

#
# setup the arrays we want to add to the grid and fill during grid construction time
#
# use the cellLayer array to store horizontal layer index
# while this index is not mandatory it makes navigating in the 3D reservoir viewer easier
# the lowermost layer should have index 0
#
cellLayer = vtk.vtkIntArray()
cellLayer.SetNumberOfComponents(1)
cellLayer.SetName("CellLayer")
ug.GetCellData().AddArray(cellLayer)

#
# the cellName array is also optional
# however if you use the grid generated by this script for importing/converting a TOUGH2
# model then the name of a cell must be the same as used in TOUGH2 for the fracture element, e.g. 'aaa 1'
#
cellName = vtk.vtkStringArray()
cellName.SetName("Name")
ug.GetCellData().AddArray(cellName)

# construct the grid
for i in range(len(X) - 1):
    for j in range(len(Y) - 1):
        for k in range(len(Z) - 1):
            
            # create an Id list which will store the point ids for the cell
            lst = vtk.vtkIdList()
            
            #
            # we want to create hexahedron cells
            #
            # other regular cell types and their point id orders can be found at
            # https://raw.githubusercontent.com/rweigel/cds301/master/vtk/refs/file-formats-figure-2.png
            #
            
            lst.InsertNextId(insertUniquePoint(X[i], Y[j], Z[k]))
            lst.InsertNextId(insertUniquePoint(X[i], Y[j+1], Z[k]))
            lst.InsertNextId(insertUniquePoint(X[i+1], Y[j+1], Z[k]))
            lst.InsertNextId(insertUniquePoint(X[i+1], Y[j], Z[k]))
            
            lst.InsertNextId(insertUniquePoint(X[i], Y[j], Z[k+1]))
            lst.InsertNextId(insertUniquePoint(X[i], Y[j+1], Z[k+1]))
            lst.InsertNextId(insertUniquePoint(X[i+1], Y[j+1], Z[k+1]))
            lst.InsertNextId(insertUniquePoint(X[i+1], Y[j], Z[k+1]))

            #            
            # for more complex polyhedron cells see
            # https://vtk.org/Wiki/VTK/Polyhedron_Support
            #
            # i.e. the Id list should contain
            # [numberOfCellFaces, (numberOfPointsOfFace0, pointId0, pointId1, … ), (numberOfPointsOfFace1, pointId0, pointId1, …), … ]
            #
            # you can use the polyhedron cell type for all cells, however they are more complex to generate
            # they are best reserved for complex Voronoi grids etc
            #

            # insert the new cell into the grid
            cellid = ug.InsertNextCell(vtk.VTK_HEXAHEDRON, lst)

            # add the values for the arrays
            cellLayer.InsertNextTuple1(i)
            cellName.InsertNextValue(str(cellid))           # you can use other names for the cells, for example TOUGH2 names like 'aaa 1'

#
# finished generating the grid, write it to file
#
writer = vtk.vtkXMLUnstructuredGridWriter()
writer.SetInputData(ug)
writer.SetFileName("grid.vtu")
writer.Update()